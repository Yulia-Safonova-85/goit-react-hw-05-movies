{"version":3,"file":"static/js/186.b608ae25.chunk.js","mappings":"8SAEAA,EAAAA,EAAAA,SAAAA,QAAwB,+BACxBA,EAAAA,EAAAA,SAAAA,OAAwB,CACpBC,QAAS,mCACTC,eAAe,GAGnB,IAAMC,EAAU,kCAGHC,EAAa,mCAAG,uGACtBJ,EAAAA,EAAAA,IAAU,sBAChBK,MAAK,qBAAEC,KAAOC,QACPC,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,MAAkBC,EAAxB,EAAYC,YAAZ,MACX,CAAEH,GAAAA,EAAIC,MAAAA,EAAOC,OAAOR,EAASQ,EADlB,GADN,IAIHE,OAAM,SAAAC,GAAUC,QAAQC,IAAIF,EAAMG,QAAW,KANnB,2CAAH,qDAWbC,EAAmB,SAAAC,GAC5B,OAAOnB,EAAAA,EAAAA,IAAA,iBAAoBmB,EAApB,MAAgCd,MAC3C,oBAAGC,KACCG,EADJ,EACIA,GACaE,EAFjB,EAEIC,YACAF,EAHJ,EAGIA,MACcU,EAJlB,EAIIC,aACcC,EALlB,EAKIC,aACAC,EANJ,EAMIA,SACAC,EAPJ,EAOIA,OAPJ,MAQW,CAAChB,GAAAA,EAAIE,OAAQR,EAAUQ,EAC9BD,MAAAA,EACAU,YAAa,IAAIM,KAAKN,GAAaO,cACnCL,UAAWM,KAAKC,MAAkB,GAAZP,GACtBE,SAAAA,EACAC,OAAAA,EAbJ,IAgBMZ,OAAM,SAAAC,GAAUC,QAAQC,IAAIF,EAAMG,QAAS,GAC/C,EAGWa,EAAe,mCAAG,WAAMC,GAAN,0FACxB/B,EAAAA,EAAAA,IAAA,8BAAiC+B,IAAS1B,MAAK,qBAAGC,KAAQC,QACzDC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAoBC,EAA3B,EAAcC,YAAd,MAAyC,CACnDH,GAAAA,EACAC,MAAAA,EACAC,OAAQR,EAAUQ,EAHR,GAD0C,IAKjDE,OAAM,SAAAC,GAAUC,QAAQC,IAAIF,EAAMG,QAAU,KANlB,2CAAH,sDAYfe,EAAY,SAAAb,GACrB,OAAOnB,EAAAA,EAAAA,IAAA,iBAAoBmB,EAApB,cAAwCd,MAAK,qBAAEC,KAAO2B,KACxDzB,KAAI,gBAAEC,EAAF,EAAEA,GAAIyB,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,UAAyBC,EAArC,EAAuBC,aAAvB,MACR,CAAC5B,GAAAA,EAAIyB,KAAAA,EAAMC,UAAAA,EAAWC,MAAOjC,EAAUiC,EAD/B,GAD2C,IAGlDvB,OAAM,SAAAC,GAAUC,QAAQC,IAAIF,EAAMG,QAAS,GAChD,EAKYqB,EAAe,SAAAnB,GAC5B,OAAOnB,EAAAA,EAAAA,IAAA,iBAAoBmB,EAApB,cAAwCd,MAAK,qBAAEC,KAAOC,QACrDC,KAAI,kBAA0B,CAACC,GAA3B,EAAEA,GAA6B8B,OAA/B,EAAMA,OAAiCC,QAAvC,EAAcA,QAAd,GADwC,IAElD3B,OAAM,SAAAC,GAAUC,QAAQC,IAAIF,EAAMG,QAAS,GAE5C,C,8EC7CD,UAtBgB,WAChB,IAAOE,GAAUsB,EAAAA,EAAAA,MAAVtB,QACP,GAA4BuB,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAgBC,EAAhB,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACNP,EAAAA,EAAAA,IAAanB,GAASd,KAAKuC,EAC9B,GAAE,CAACzB,KAGA,yBACKwB,EAAQG,OAAS,GACd,wBACKH,EAAQnC,KAAI,gBAAEC,EAAF,EAAEA,GAAI8B,EAAN,EAAMA,OAAQC,EAAd,EAAcA,QAAd,OACjB,2BACY,wBAAKD,KACL,uBAAIC,MAFP/B,EADQ,OAMhB,4DAEX,C","sources":["ApiFetch.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL ='https://api.themoviedb.org/3';\naxios.defaults.params = {\n    api_key: 'd3ed4ffb60d13827c3ec286dc736d3f2',\n    include_adult: false,\n};\n// https://image.tmdb.org/t/p/w500/kqjL17yufvn9OVLyXYpvtyrFfak.jpg\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\n\nexport const fetchTrending = async ()=> {\nreturn axios.get('/trending/all/day?')\n.then(({data: {results}})=>\nresults.map(({id, title,poster_path:poster})=>\n({ id, title, poster:IMG_URL+ poster,}\n)\n)).catch(error => {console.log(error.message); })\n\n};\n\n// https://api.themoviedb.org/3/movie/{movie_id}?api_key=<<api_key>>&language=en-US\nexport const fetchMovieDetail = movieId => {\n    return axios.get(`/movie/${movieId}?`).then(\n({ data: {\n    id,\n    poster_path: poster,\n    title,\n    release_date: releaseYear,\n    vote_average: userScore,\n    overview,\n    genres,\n  },}) => ({id, poster: IMG_URL + poster,\n    title,\n    releaseYear: new Date(releaseYear).getFullYear(),\n    userScore: Math.round(userScore * 10),\n    overview,\n    genres,\n\n  })\n    ).catch(error => {console.log(error.message)}\n)};\n\n// https://api.themoviedb.org/3/search/movie?\nexport const fetchQuerySerch = async query=> {\nreturn axios.get(`/search/movie?query=${query}`).then(({ data: { results } }) =>\nresults.map(({ id, title, poster_path: poster }) => ({\n  id,\n  title,\n  poster: IMG_URL + poster,\n}))).catch(error => {console.log(error.message )}) \n\n};\n// Get the cast and crew for a movie.\n// https://api.themoviedb.org/3/movie/{movie_id}/credits?api_key=<<api_key>>&language=en-US\n\nexport const fetchCast = movieId =>{\n    return axios.get(`/movie/${movieId}/credits?`).then(({data: {cast}})=>\n    cast.map(({id, name, character, profile_path: photo})=>\n    ({id, name, character, photo: IMG_URL + photo,}))\n    ).catch(error => {console.log(error.message)}) \n} ;\n\n// Get the user reviews for a movie.\n// https://api.themoviedb.org/3/movie/{movie_id}/reviews?api_key=<<api_key>>&language=en-US&page=1\n\nexport const fetchReviews = movieId => {\nreturn axios.get(`/movie/${movieId}/reviews?`).then(({data: {results}})=>\nresults.map(({id, author, content})=>({id, author, content }) )\n).catch(error => {console.log(error.message)}) \n\n};","import { useParams } from \"react-router-dom\";\nimport { useState,useEffect } from \"react\";\nimport { fetchReviews } from \"ApiFetch\";\n\n const Reviews =()=> {\nconst {movieId}= useParams();\nconst [reviews, setReviews]=useState([]);\n\nuseEffect(()=>{\n    fetchReviews(movieId).then(setReviews)\n}, [movieId]);\n\nreturn(\n    <div>\n        {reviews.length > 0 ? (\n            <ul>\n                {reviews.map(({id, author, content})=>(\n            <li key={id}>\n                        <h3>{author}</h3>\n                        <p>{content}</p> \n                        </li>))}\n            </ul>\n        ) : (<p>Sorry, we dont have any reviews</p>)}\n    </div>\n)};\n\nexport default Reviews;"],"names":["axios","api_key","include_adult","IMG_URL","fetchTrending","then","data","results","map","id","title","poster","poster_path","catch","error","console","log","message","fetchMovieDetail","movieId","releaseYear","release_date","userScore","vote_average","overview","genres","Date","getFullYear","Math","round","fetchQuerySerch","query","fetchCast","cast","name","character","photo","profile_path","fetchReviews","author","content","useParams","useState","reviews","setReviews","useEffect","length"],"sourceRoot":""}